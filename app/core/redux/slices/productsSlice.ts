import { PayloadAction, createSlice } from '@reduxjs/toolkit';

import { Product } from '@/core/domain/product/Product';

/**
 * The interface of the Products
 */
interface ProductsState {
	products: Product[] | null;
	loading: boolean;
	error: string | null;
	isOnDragProducts: boolean;
}

/**
 * The initial state of the Products
 */

const initialState: ProductsState = {
	products: null,
	loading: false,
	error: null,
	isOnDragProducts: false,
};
// Create a slice of the Redux store for the products
const slice = createSlice({
	name: 'products',
	initialState,
	reducers: {
		// A reducer to indicate that the products are being loaded
		getProductsStart: state => {
			state.loading = true;
		},
		// A reducer to update the state when the products are successfully loaded
		getProductsSuccess: (state, action: PayloadAction<Product[]>) => {
			state.loading = false;
			state.products = action.payload;
		},
		// A reducer to update the state if loading the products fails
		getProductsFailure: (state, action: PayloadAction<string>) => {
			state.loading = false;
			state.error = action.payload;
		},
		// A reducer to set boolean value for access dragging products list
		setIsOnDragProducts: (state, action: PayloadAction<boolean>) => {
			state.isOnDragProducts = action.payload;
		},
	},
});

// Export the actions and reducer generated by the createSlice function
export const { actions: productsAction, reducer: productsReducer } = slice;
